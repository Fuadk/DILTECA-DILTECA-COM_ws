{
  "version": 3,
  "sources": ["../../../../../../node_modules/@nikiphoros/ngx-toggle/fesm2020/nikiphoros-ngx-toggle.mjs"],
  "sourcesContent": ["import * as i0 from '@angular/core';\nimport { forwardRef, Directive, Input, HostListener, NgModule } from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nclass NgxToggleDirective {\n  constructor(elementRef, renderer) {\n    this.elementRef = elementRef;\n    this.renderer = renderer;\n    this.true = true;\n    this.false = false;\n    this.propagateChange = _ => {};\n  }\n  onHostChange(ev) {\n    this.propagateChange(ev.target.checked ? this.true : this.false);\n  }\n  writeValue(obj) {\n    // model -> view\n    if (obj === this.true) {\n      // this.elementRef.nativeElement.checked = true;\n      this.renderer.setProperty(this.elementRef.nativeElement, 'checked', true);\n    } else {\n      this.renderer.setProperty(this.elementRef.nativeElement, 'checked', false);\n    }\n  }\n  registerOnChange(fn) {\n    this.propagateChange = fn;\n  }\n  registerOnTouched(fn) {}\n  setDisabledState(isDisabled) {}\n}\nNgxToggleDirective.ɵfac = function NgxToggleDirective_Factory(__ngFactoryType__) {\n  return new (__ngFactoryType__ || NgxToggleDirective)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.Renderer2));\n};\nNgxToggleDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: NgxToggleDirective,\n  selectors: [[\"\", \"ToggleValue\", \"\"]],\n  hostBindings: function NgxToggleDirective_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"change\", function NgxToggleDirective_change_HostBindingHandler($event) {\n        return ctx.onHostChange($event);\n      });\n    }\n  },\n  inputs: {\n    true: \"true\",\n    false: \"false\"\n  },\n  features: [i0.ɵɵProvidersFeature([{\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => NgxToggleDirective),\n    multi: true\n  }])]\n});\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxToggleDirective, [{\n    type: Directive,\n    args: [{\n      selector: \"[ToggleValue]\",\n      providers: [{\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: forwardRef(() => NgxToggleDirective),\n        multi: true\n      }]\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }, {\n      type: i0.Renderer2\n    }];\n  }, {\n    true: [{\n      type: Input\n    }],\n    false: [{\n      type: Input\n    }],\n    onHostChange: [{\n      type: HostListener,\n      args: ['change', ['$event']]\n    }]\n  });\n})();\nclass NgxToggleModule {}\nNgxToggleModule.ɵfac = function NgxToggleModule_Factory(__ngFactoryType__) {\n  return new (__ngFactoryType__ || NgxToggleModule)();\n};\nNgxToggleModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: NgxToggleModule,\n  declarations: [NgxToggleDirective],\n  exports: [NgxToggleDirective]\n});\nNgxToggleModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxToggleModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [NgxToggleDirective],\n      imports: [],\n      exports: [NgxToggleDirective]\n    }]\n  }], null, null);\n})();\n\n/*\r\n * Public API Surface of ngx-toggle\r\n */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { NgxToggleDirective, NgxToggleModule };\n"],
  "mappings": "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",
  "names": []
}
